name: CI/CD
on:
  push:
    branches:
      - master

jobs:
  CI:
   runs-on: ubuntu-latest

   steps:
   - name: Checkout code
     uses: actions/checkout@v2

   - name: Set up JDK 17
     uses: actions/setup-java@v2
     with:
       distribution: 'adopt'
       java-version: '17'
   # updating app version according to pipline run    
   - name: Read Old Version
     id: read-old-version
     run: |
       echo "old_version=$(cat myapp/version.txt)"
       echo "old_version=$(cat myapp/version.txt)" >> $GITHUB_OUTPUT

   - name: Increment Patch Version
     id: increment_patch_version
     run: |
       # Set the new version
       new_version="1.0.${GITHUB_RUN_NUMBER}"

       echo "patch_version=${new_version}" >> $GITHUB_OUTPUT
       echo "New Version: ${new_version}"
       echo "${new_version}" > myapp/version.txt 
       cat myapp/version.txt 

   - name: Update Version in Pom.xml File
     run: |
      sed -i "0,/<version>[^<]*<\/version>/ s|<version>[^<]*</version>|<version>${{ steps.increment_patch_version.outputs.patch_version }}-SNAPSHOT</version>|" myapp/pom.xml  

   - name: Commit and push version file
     run: |
       git config user.name "GitHub Actions"
       git config user.email "actions@github.com"
       git status
       git add myapp/version.txt myapp/pom.xml
       git commit -m "Update pom.xml,version.txt with ${{ steps.increment_patch_version.outputs.patch_version }}"
       git push

   - name: Build and push Docker image
     env:
       PATCH_VERSION: ${{ steps.increment_patch_version.outputs.patch_version }}
       DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
       DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}        
     run: |
       echo "docker build myapp:$PATCH_VERSION myapp/"
       cd myapp
       docker build -t myapp:$PATCH_VERSION .
       echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
       docker tag myapp:$PATCH_VERSION $DOCKER_USERNAME/myapp:$PATCH_VERSION
       docker push $DOCKER_USERNAME/myapp:$PATCH_VERSION       
       
  CD:
    runs-on: ubuntu-latest
    needs: CI
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get image tag
      id: Get_image_tag
      run: |
        git pull
        echo "tag=$(cat myapp/version.txt)"
        echo "tag=$(cat myapp/version.txt)" >> $GITHUB_OUTPUT

    - name: Download Docker image and run
      env:
        TAG: ${{ steps.Get_image_tag.outputs.tag }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      run: |
        echo $TAG
        echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker pull $DOCKER_USERNAME/myapp:$TAG
        docker run -d --name myapp-container -p 8080:8080 $DOCKER_USERNAME/myapp:$TAG
        docker logs -f myapp-container
        docker stop myapp-container


    # - name: Install Minikube
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y conntrack
    #     curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
    #     sudo dpkg -i minikube_latest_amd64.deb
    #     minikube version

      # Add Minikube cluster setup step
    # - name: Setup Minikube Cluster
    #   run: |
    #     minikube start --kubernetes-version=latest
    #     kubectl config use-context minikube 

    # helm deployment
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy with Helm
      env:
        TAG: ${{ steps.Get_image_tag.outputs.tag }}
      run: |
        sed -i "s|tag:*|tag: '$TAG'|g" helm/myapp-chart/values.yaml
        cat helm/myapp-chart/values.yaml
        helm upgrade --install myapp helm/myapp-chart/ -n default
        kubectl logs -l app.kubernetes.io/instance=myapp